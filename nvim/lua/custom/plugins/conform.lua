return {}
-- { -- Autoformat
--     'stevearc/conform.nvim',
--     lazy = false,
--     keys = {
--       {
--         '<leader>f',
--         function()
--           require('conform').format { async = true, lsp_fallback = true }
--         end,
--         mode = '',
--         desc = '[F]ormat buffer',
--       },
--     },
--     opts = {
--       notify_on_error = false,
--       format_on_save = function(bufnr)
--         -- Disable "format_on_save lsp_fallback" for languages that don't
--         -- have a well standardized coding style. You can add additional
--         -- languages here or re-enable it for the disabled ones.
--         -- local disable_filetypes = { c = true, cpp = true }
--         return {
--           timeout_ms = 3000,
--           lsp_fallback = true,
--           -- lsp_fallback = not disable_filetypes[vim.bo[bufnr].filetype],
--         }
--       end,
--       formatters_by_ft = {
--         lua = { 'stylua' },
--         markdown = { 'markdownlint' },
--         terraform = { 'tflint' },
--         json = { 'jsonlint' },
--         dockerfile = { 'hadolint' },
--         -- Conform can also run multiple formatters sequentially
--         -- python = { "isort", "black" },
--         -- You can use a sub-list to tell conform to run *until* a formatter
--         -- is found.
--         --
--         javascript = { 'prettierd', 'eslint_d' },
--         typescript = { 'prettierd', 'eslint_d' },
--         -- typescript = { 'eslint_d' },
--         svelte = { 'prettierd', 'eslint_d' },
--         go = { 'golines', 'goimports', 'golangci', 'golangci_lint_ls', 'golangci-lint' },
--         html = { 'htmlbeautifier', 'htmlhint' },
--         -- tmpl = { 'htmlbeautifier', 'htmlhint' },
--       },
--     },
--     -- config = function()
--     -- vim.api.nvim_create_autocmd('BufWritePre', {
--     --   group = vim.api.nvim_create_augroup('EslintFixAll', { clear = true }),
--     --   pattern = { '*.tsx', '*.ts', '*.jsx', '*.js' },
--     --   command = 'silent! EslintFixAll',
--     -- })
--     -- end,
--   }
